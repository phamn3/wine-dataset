#look at pieces of igraph
E(net) #edges of net
V(net) #vertices of net
E(net)$type #Edge attribute type
V(net)$media #Vertex attribute media
V(net)[media=="BBC"] #find nodes & edges by attribute
E(net)[type=="mention"]
#edgelist or matrix
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
#plot the igraph
plot(net)
net <- simplify(net, remove.multiple = F, remove.loops = T) #removing loops in graph
plot(net, edge.arrow.size=.4, vertex.label=NA) #reducing arrow size & removing labels
plot(net, edge.arrow.size=.4) #playing around with plot parameters below
plot(net, edge.arrow.size=.4, edge.curved = .1) #curved edges
plot(net, edge.arrow.size=.2, edge.color="orange",
vertex.color="orange", vertex.frame.color="#ffffff",
vertex.label=V(net)$media, vertex.label.color="black")
#color nodes based on media type, size based on # of links connected to node
colrs <- c("gray50", "tomato", "gold") #generate colors based on media type
V(net)$color <- colrs[V(net)$media.type]
deg <- degree(net, mode="all") #compute node degree
V(net)$size <- deg*3
# We could also use the audience size value:
V(net)$size <- V(net)$audience.size*0.6
V(net)$label <- NA #remove labels
E(net)$width <- E(net)$weight/6 #set edge width based on weight
#change arrow size and edge color:
E(net)$arrow.size <- .2
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/12
plot(net)
legend(x=-1.5, y=-1.1, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1) #add legend
#plotting only labels of nodes
plot(net, vertex.shape="none", vertex.label=V(net)$media,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85")
####### Dataset 2: matrix ########## example of two-mode/bipartite network
nodes2 <- Dataset2.Media.User.Example.NODES
links2 <- Dataset2.Media.User.Example.EDGES
head(nodes2) #examine
head(links2) #edges are in a matrix form !!!!
links2 <- as.matrix(links2)
dim(links2)
dim(nodes2)
net2 <- graph_from_incidence_matrix(links2) #read matrix into graph object
table(V(net2)$type)
##### Network Layouts ######
#basic random generated network graph - Barabasi-Albert model
net.bg <- sample_pa(80)
V(net.bg)$size <- 8
V(net.bg)$frame.color <- "white"
V(net.bg)$color <- "orange"
V(net.bg)$label <- ""
E(net.bg)$arrow.mode <- 0
plot(net.bg)
#Force-directed layouts - nicer looking graphs, "electrically charged particules"
#Fruchterman-Reingold
l <- layout_with_fr(net.bg) #this step is like setting the seed
plot(net.bg, layout=l)
#Kamada Kawai
#LGL algorithm
#MDS - multidimensional scaling --> tries to place nodes based on measure of similarity
# POTENTIAL FOR PROJECT^^^^? nodes often overall though
plot(net.bg, layout=layout_with_mds)
#Potential Ideas for Filtering
hist(links$weight)
mean(links$weight)
sd(links$weight)
cut.off <- mean(links$weight)
net.sp <- delete_edges(net, E(net)[weight<cut.off])
plot(net.sp)
#clustering
par(mfrow=c(1,2))
clp <- cluster_label_prop(net)
class(clp)
# Community detection returns an object of class "communities"
# which igraph knows how to plot:
plot(clp, net)
# We can also plot the communities without relying on their built-in plot:
V(net)$community <- clp$membership
colrs <- adjustcolor( c("gray50", "tomato", "gold", "yellowgreen"), alpha=.6)
plot(net, vertex.color=colrs[V(net)$community])
dev.off()
#####Dataset 1: edgelist############
nodes <- Dataset1.Media.Example.NODES
links <- Dataset1.Media.Example.EDGES
head(nodes)
nrow(nodes)
length(unique(nodes$id))
head(links) #IN A LIST FORM --> USEFUL FOR PROJECT
nrow(links)
nrow(unique(links[,c("from", "to")])) #more links than unique from-to combos
#indicates that there are multiple links between the same two nodes, so will need to
#collapse links by summing weights
links <- aggregate(links[,3], links[,-3], sum)
links <- links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL
#convert data to igraph
#d represents edges of network: 1st two columns must be ID of source & target
#vertices represent types of node with attributes
library('igraph')
net <- graph_from_data_frame(d=links, vertices = nodes, directed=T)
net
#look at pieces of igraph
E(net) #edges of net
V(net) #vertices of net
E(net)$type #Edge attribute type
V(net)$media #Vertex attribute media
V(net)[media=="BBC"] #find nodes & edges by attribute
E(net)[type=="mention"]
#edgelist or matrix
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
#plot the igraph
plot(net)
net <- simplify(net, remove.multiple = F, remove.loops = T) #removing loops in graph
plot(net, edge.arrow.size=.4, vertex.label=NA) #reducing arrow size & removing labels
plot(net, edge.arrow.size=.4) #playing around with plot parameters below
plot(net, edge.arrow.size=.4, edge.curved = .1) #curved edges
plot(net, edge.arrow.size=.2, edge.color="orange",
vertex.color="orange", vertex.frame.color="#ffffff",
vertex.label=V(net)$media, vertex.label.color="black")
#color nodes based on media type, size based on # of links connected to node
colrs <- c("gray50", "tomato", "gold") #generate colors based on media type
V(net)$color <- colrs[V(net)$media.type]
deg <- degree(net, mode="all") #compute node degree
V(net)$size <- deg*3
# We could also use the audience size value:
V(net)$size <- V(net)$audience.size*0.6
V(net)$label <- NA #remove labels
E(net)$width <- E(net)$weight/6 #set edge width based on weight
#change arrow size and edge color:
E(net)$arrow.size <- .2
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/12
plot(net)
legend(x=-1.5, y=-1.1, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1) #add legend
#plotting only labels of nodes
plot(net, vertex.shape="none", vertex.label=V(net)$media,
vertex.label.font=2, vertex.label.color="gray40",
vertex.label.cex=.7, edge.color="gray85")
####### Dataset 2: matrix ########## example of two-mode/bipartite network
nodes2 <- Dataset2.Media.User.Example.NODES
links2 <- Dataset2.Media.User.Example.EDGES
head(nodes2) #examine
head(links2) #edges are in a matrix form !!!!
links2 <- as.matrix(links2)
dim(links2)
dim(nodes2)
net2 <- graph_from_incidence_matrix(links2) #read matrix into graph object
table(V(net2)$type)
##### Network Layouts ######
#basic random generated network graph - Barabasi-Albert model
net.bg <- sample_pa(80)
V(net.bg)$size <- 8
V(net.bg)$frame.color <- "white"
V(net.bg)$color <- "orange"
V(net.bg)$label <- ""
E(net.bg)$arrow.mode <- 0
plot(net.bg)
#Force-directed layouts - nicer looking graphs, "electrically charged particules"
#Fruchterman-Reingold
l <- layout_with_fr(net.bg) #this step is like setting the seed
plot(net.bg, layout=l)
#Kamada Kawai
#LGL algorithm
#MDS - multidimensional scaling --> tries to place nodes based on measure of similarity
# POTENTIAL FOR PROJECT^^^^? nodes often overall though
plot(net.bg, layout=layout_with_mds)
#Potential Ideas for Filtering
hist(links$weight)
mean(links$weight)
sd(links$weight)
cut.off <- mean(links$weight)
net.sp <- delete_edges(net, E(net)[weight<cut.off])
plot(net.sp)
#clustering
par(mfrow=c(1,2))
clp <- cluster_label_prop(net)
class(clp)
# Community detection returns an object of class "communities"
# which igraph knows how to plot:
plot(clp, net)
# We can also plot the communities without relying on their built-in plot:
V(net)$community <- clp$membership
colrs <- adjustcolor( c("gray50", "tomato", "gold", "yellowgreen"), alpha=.6)
plot(net, vertex.color=colrs[V(net)$community])
#color, position, size, and shape are impt. for network visualizations
#COLORS - Figure 1
#pch = point symbol shape, cex=size, col=color
plot(x=1:10, y=rep(5,10), pch=19, cex=3, col="dark red")
points(x=1:10, y=rep(6,10), pch=19, cex=3, col="557799")
points(x=1:10, y=rep(4,10), pch=19, cex=3, col=rgb(.25,.5,.3))
#Figure 2-set transparency of objects using parameter alpha (range 0-1)
plot(x=1:5, y=rep(5,5), pch=19, cex=12, col=rgb(.25,.5,.3, alpha=.5), xlim=c(0,6))
par(bg="gray40")
col.tr <- grDevices::adjustcolor("557799", alpha=0.7)
plot(x=1:5, y=rep(5,5), pch=10, cex=12, col=col.tr, xlim=c(0,6))
#taking a look at color palettes
palte1 <- heat.colors(5, alpha=1) #opaque, from heat palette
palte2 <- rainbow(5, alpha=.5) #transparent, from heat palette
plot(x=1:10, y=1:10, pch=19, cex=5, col=palte1)
plot(x=1:10, y=1:10, pch=19, cex=5, col=palte2)
dev.off()
#color, position, size, and shape are impt. for network visualizations
#COLORS - Figure 1
#pch = point symbol shape, cex=size, col=color
plot(x=1:10, y=rep(5,10), pch=19, cex=3, col="dark red")
points(x=1:10, y=rep(6,10), pch=19, cex=3, col="557799")
points(x=1:10, y=rep(4,10), pch=19, cex=3, col=rgb(.25,.5,.3))
#taking a look at color palettes
palte1 <- heat.colors(5, alpha=1) #opaque, from heat palette
palte2 <- rainbow(5, alpha=.5) #transparent, from heat palette
plot(x=1:10, y=1:10, pch=19, cex=5, col=palte1)
plot(x=1:10, y=1:10, pch=19, cex=5, col=palte2)
#####Dataset 1: edgelist############
nodes <- Dataset1.Media.Example.NODES
links <- Dataset1.Media.Example.EDGES
setwd("~/GitHub/wine-dataset")
wine1 <- read.csv("~/GitHub/wine-dataset/wine1.csv")
View(wine1)
?read.csv
#importing dataset
wine1 <- read.csv("~/wine1.csv")
setwd("~/GitHub/wine-dataset")
#importing dataset
wine1 <- read.csv("~/wine1.csv")
wine1 <- read.csv("~/GitHub/wine-dataset/wine1.csv")
View(wine1)
attach(wine1)
summary(wine1)
?tapply
hist(subset(wine1, Class = 1))
?aes
require(ggplot2)
data(diamonds)
head(diamonds)
View(diamonds)
ggplot(diamonds, aes(clarity, fill=cut)) +geom_bar()
ggplot(diamonds, aes(clarity, fill=color)) +geom_bar()
ggplot(diamonds, aes(clarity)) +geom_bar() + facet_wrap(~cut)
ggplot2.histogram(data=wine1, xName='Alcohol',
groupName='Class', legendPosition="top")
ggplot(wine1[1:59,]) + geom_histogram()
set.seed(1)
wine1_s <- shuffle(wine1)
#importing dataset
wine1 <- wine1
#importing dataset
wine1 <- wine1
#importing dataset
wine1 <- wine1
attach(wine1)
summary(wine1)
set.seed(1)
#apply kmeans, removing first column. choosing k=3 because there are 3 cultivars
wclass <- kmeans(wine1[,-1], centers = 3, iter.max = 1000)
wclass
tbl <- table(wine1[,1], wclass$cluster)
tbl
#plotting kmeans results
plot(wine1[c("Ash", "Alcalinity.of.ash")], col = results$cluster)
#plotting kmeans results
plot(wine1[c("Ash", "Alcalinity.of.ash")], col = wclass$cluster)
#plotting actual cluster results
plot(iris[c("Ash", "Alcalinity.of.ash")], col = Class)
#plotting actual cluster results
plot(wine1[c("Ash", "Alcalinity.of.ash")], col = Class)
#plotting kmeans results
ggplot(wine1, aes(Ash, Alcalinity.of.ash)) + geom_point(Ash, Alcalinity.of.ash, colour = Class)
#plotting kmeans results
ggplot(wine1, aes(Ash, Alcalinity.of.ash)) + geom_point(colour = wclass$cluster)
ggplot(wine1, aes(Ash, Alcalinity.of.ash)) + geom_point(colour = wine1$Class)
#plotting kmeans results
ggplot(wine1, aes(Ash, Alcalinity.of.ash)) + geom_point(colour = wclass$cluster) +
ggtitle("Kmeans Results: Ash vs. Alcalinity of ash")
#plotting actual cluster results
ggplot(wine1, aes(Ash, Alcalinity.of.ash)) + geom_point(colour = wine1$Class) +
ggtitle("True Results: Ash vs. Alcalinity of ash")
#subsetting data
class1 <- wine1[which(Class == 1),]
View(class1)
class2 <- win1[which(Class ==2),]
class2 <- wine1[which(Class == 2),]
class3 <- wine1[which(Class == 3),]
summary(class1)
summary(class2)
summary(class3)
#plotting some visualizations
ggplot(wine1) +
geom_histogram(class1$Alcohol, fill = "red") +
geom_histogram(class2$Alcohol, fill = "blue") +
geom_histogram(class3$Alcohol, fill = "green")
#plotting some visualizations
ggplot(wine1, aes(Alcohol)) +
geom_histogram(class1$Alcohol, fill = "red") +
geom_histogram(class2$Alcohol, fill = "blue") +
geom_histogram(class3$Alcohol, fill = "green")
#plotting some visualizations
ggplot(class1, aes(class1$Alcohol)) + geom_histogram()
#plotting some visualizations
ggplot(class1, aes(class1$Alcohol)) + geom_histogram(bins=25)
#plotting some visualizations
ggplot(class1, aes(class1$Alcohol)) + geom_histogram(bins=20)
#plotting some visualizations
ggplot(wine1, aes(wine1$Flavanoids)) + geom_point(colour=wine1$Class)
#plotting some visualizations
ggplot(wine1, aes(wine1$Flavanoids)) + geom_point(wine1$Flavanoids, colour=wine1$Class)
#plotting some visualizations
ggplot(wine1, aes(Class, Alcohol)) + geom_boxplot()
#plotting some visualizations
ggplot(wine1, aes(Class, Alcohol, group=Class)) + geom_boxplot()
#plotting some visualizations
ggplot(wine1, aes(Class, Alcohol, group=Class)) + geom_boxplot() + ggtitle(Alcohol)
#plotting some visualizations
ggplot(wine1, aes(Class, Alcohol, group=Class)) + geom_boxplot() + ggtitle("Alcohol")
ggplot(wine1, aes(Class, Malic.Acid, group=Class)) + geom_boxplot() + ggtitle("Malic Acid")
ggplot(wine1, aes(Class, Ash, group=Class)) + geom_boxplot() + ggtitle("Ash")
ggplot(wine1, aes(Class, Alcalinity.of.ash, group=Class)) + geom_boxplot() + ggtitle("Alcalinity of Ash")
ggplot(wine1, aes(Class, Magnesium, group=Class, colour=Class)) + geom_boxplot() + ggtitle("Magnesium")
ggplot(wine1, aes(Class, Magnesium, group=Class)) + geom_boxplot() + ggtitle("Magnesium")
ggplot(wine1, aes(Class, Alcohol, group=Class)) + geom_boxplot() + ggtitle("Alcohol")
ggplot(wine1, aes(Class, Total.phenols, group=Class)) + geom_boxplot() + ggtitle("Total Phenols")
ggplot(wine1, aes(Class, Flavanoids, group=Class)) + geom_boxplot() + ggtitle("Flavanoids")
ggplot(wine1, aes(Class, Nonflavanoid.phenols, group=Class)) + geom_boxplot() + ggtitle("Nonflavanoid Phenols")
ggplot(wine1, aes(Class, Proanthocyanins, group=Class)) + geom_boxplot() + ggtitle("Proanthocyanins")
ggplot(wine1, aes(Class, Color.intensity, group=Class)) + geom_boxplot() + ggtitle("Color Intensity")
ggplot(wine1, aes(Class, Hue, group=Class)) + geom_boxplot() + ggtitle("Hue")
ggplot(wine1, aes(Class, OD280.OD315.of.diluted.wines, group=Class)) + geom_boxplot() + ggtitle("OD280/OD315 of Diluted Wines")
ggplot(wine1, aes(Class, Proline, group=Class)) + geom_boxplot() + ggtitle("Proline")
str(wine1)
install.packages("factoextra")
library(factoextra)
fviz_cluster(wclass, data = wine1, ellipse.type = "convex", palette = "jco",
ggtheme = theme_minimal())
### PAM Algorithm aka K-medoids clustering
install.packages("cluster")
library(cluster)
wpam <- pam(wine1[,-1], k=3, metric = "euclidian")
wpam <- pam(wine1[,-1], k=3, metric = euclidian)
wpam <- pam(wine1[,-1], k=3)
wpam
tbl1 <- table(wine1[,1], wpam$clustering)
tbl1
tbl #resulting contingency table didn't produce great results
#visualize
fviz_cluster(wpam,
ellipse.type = "t", # Concentration ellipse
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_classic())
#visualize
fviz_cluster(wpam)
#visualize
fviz_cluster(wpam,
#repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_classic())
#visualize
fviz_cluster(wpam,
#repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_minimal())
winequality.white <- read.csv("~/GitHub/wine-dataset/winequality-white.csv", sep=";")
View(winequality.white)
#importing dataset
ww <- winequality.white
attach(ww)
str(ww)
sum(is.na(ww)) #are there NA's
print(sum(is.na(ww))) #are there NA's
summary(ww)
dim(ww)
data("iris")
#exploring properties of the white wine dataset
attach(ww)
View(ww)
#visualizations to start off with
ggplot(ww, aes(quality)) + geom_histogram()
?geom_density
#visualizations to start off with
ggplot(ww, aes(ww$quality)) + geom_histogram() + ggtitle("Histogram of Quality")
#visualizations to start off with
ggplot(ww, aes(ww$quality)) + geom_histogram(binwidth = 40) + ggtitle("Histogram of Quality")
#visualizations to start off with
ggplot(ww, aes(ww$quality)) + geom_histogram(binwidth = 30) + ggtitle("Histogram of Quality")
#visualizations to start off with
ggplot(ww, aes(ww$quality)) + geom_histogram(binwidth = 1) + ggtitle("Histogram of Quality")
#Hierarchical clustering
dwine <- dist(as.matrix(wine1))
hwine <- hclust(dwine)
plot(hwine)
# Visualize using factoextra
# Cut in 4 groups and color by groups
fviz_dend(hwine, k = 3, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
# Visualize using factoextra
# Cut in 4 groups and color by groups
fviz_dend(hwine, k = 3, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#00AFBB","#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
# Visualize using factoextra
# Cut in 4 groups and color by groups
fviz_dend(hwine, k = 3, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
k_colors = c(""#00AFBB", "#E7B800", "#FC4E07"),
# Visualize using factoextra
# Cut in 4 groups and color by groups
fviz_dend(hwine, k = 3, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
rect = TRUE # Add rectangle around groups)
# Visualize using factoextra
# Cut in 4 groups and color by groups
fviz_dend(hwine, k = 3, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE) # Add rectangle around groups
ggplot(wine1, aes(x=factor(0),y=fixed.acidity)) + geom_boxplot() + ggtitle("Fixed Acidity")
ggplot(wine1, aes(x=factor(0),y=fixed.acidity)) + geom_boxplot() + xlab("") +
ggtitle("Fixed Acidity")
ggplot(ww, aes(x=factor(0),y=fixed.acidity)) + geom_boxplot() + xlab("") +
ggtitle("Fixed Acidity")
ggplot(ww, aes(x=factor(0),y=fixed.acidity)) + geom_boxplot() + xlab(" ") +
ggtitle("Fixed Acidity")
ggplot(ww, aes(x=factor(0),y=fixed.acidity)) + geom_boxplot() + xlab(" ") +
ggtitle("Fixed Acidity") + scale_x_discrete(breaks = NULL) + coord_flip()
ggplot(ww, aes(x=factor(0),y=fixed.acidity)) + geom_boxplot() + xlab(" ") +
ggtitle("Fixed Acidity") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=fixed.acidity)) + geom_boxplot(size=1) + xlab(" ") +
ggtitle("Fixed Acidity") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=fixed.acidity)) + geom_boxplot(size=0.5) + xlab(" ") +
ggtitle("Fixed Acidity") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=fixed.acidity)) + geom_boxplot(outlier.size=1, varwidth = TRUE) + xlab(" ") +
ggtitle("Fixed Acidity") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=fixed.acidity)) + geom_boxplot(outlier.size=1, varwidth = T) + xlab(" ") +
ggtitle("Fixed Acidity") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=fixed.acidity)) + geom_boxplot(outlier.size=1) + xlab(" ") +
ggtitle("Fixed Acidity") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=volatile.acidity)) + geom_boxplot(outlier.size=1) + xlab(" ") +
ggtitle("Volatile Acidity") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=citric.acid)) + geom_boxplot(outlier.size=1) + xlab(" ") +
ggtitle("Citric Acid") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=residual.sugar)) + geom_boxplot(outlier.size=1) + xlab(" ") +
ggtitle("Residual Sugar") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=chlorides)) + geom_boxplot(outlier.size=1) + xlab(" ") +
ggtitle("Chlorides") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=free.sulfur.dioxide)) + geom_boxplot(outlier.size=1) + xlab(" ") +
ggtitle("Free Sulfur Dioxide") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=total.sulfur.dioxide)) + geom_boxplot(outlier.size=1) + xlab(" ") +
ggtitle("Total Sulfur Dioxide") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=density)) + geom_boxplot(outlier.size=1) + xlab(" ") +
ggtitle("Density") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=pH)) + geom_boxplot(outlier.size=1) + xlab(" ") +
ggtitle("pH") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=sulphates)) + geom_boxplot(outlier.size=1) + xlab(" ") +
ggtitle("Sulphates") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=alcohol)) + geom_boxplot(outlier.size=1) + xlab(" ") +
ggtitle("Alcohol") + scale_x_discrete(breaks = NULL)
ggplot(ww, aes(x=factor(0),y=citric.acid)) + geom_boxplot(outlier.size=1) + xlab(" ") +
ggtitle("Citric Acid") + scale_x_discrete(breaks = NULL) + coord_flip()
#visualizations to start off with
ggplot(ww, aes(ww$quality)) + geom_histogram(binwidth = 1) + ggtitle("Histogram of Quality")
#Example 2
wine.hc <- wine1 %>%
scale() %>%                    #Scale data
dist(method = "euclidean") %>% #Compute dissimilarity matrix
hclust(method = "ward.D2")     #Compute hierachical clustering
fviz_dend(hwine, palette = "jco",
rect = TRUE, show_labels = FALSE)
fviz_dend(hwine,
rect = TRUE, show_labels = FALSE)
fviz_dend(hwine)
install.packages("viridisLite")
install.packages("viridisLite")
install.packages("viridis")
fviz_dend(hwine, palette = "jco",
rect = TRUE, show_labels = FALSE)
library(factoextra)
fviz_dend(hwine, palette = "jco",
rect = TRUE, show_labels = FALSE)
fviz_dend(hwine, k_colors = c("#2E9FDF", "#00AFBB", "#E7B800"),
rect = TRUE, show_labels = FALSE)
plot(hwine)
fviz_silhouette(res.hc)
fviz_silhouette(hwine)
#Everything except for alcohol had outliers
with(ww, by(factor(ww$quality), count)
#Everything except for alcohol had outliers
with(ww, by(factor(ww$quality)), count)
#Everything except for alcohol had outliers
with(ww, by(factor(ww$quality)), count)
#A lot of medium quality white wines; there are very few execellent and poor white wines
ggplot(ww, aes(x=factor(0),y=ww$quality)) + geom_boxplot(outlier.size=1) + xlab(" ") +
ggtitle("Quality") + scale_x_discrete(breaks = NULL) + coord_flip()
